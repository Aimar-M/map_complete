.filter {
    width: 22vw;
    height: 86vh;
    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: center;
    row-gap: 4vh;
}

.item1 {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    height: 6vh;
}

.filterText {
    font-family: inter;
    font-weight: 600;
    font-size: 16px;
}

.all {
    font-family: inter;
    font-weight: 400;
    font-size: 14px;
}

.all span {
    color: #1DFE9B;
    font-size: 13.5px;
}

.item1 button {
    width: 30%;
    background-color: #18c378;
    height: 6vh;
    text-align: center;
    font-size: 16px;
    font-weight: 500;
    border-radius: 5px;
    font-family: inter;
    color: white;
    border: 0px;
}

.item2 {
    width: 84%;
    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: center;
    row-gap: 20px;
    position: relative;
}

.item2 input {
    width: 100%;
    height: 6vh;
    font-family: inter;
    font-size: 14px;
    border-radius: 5px;
    border: 1px solid #B6BCB9;
}

.selects {
    width: 90%;
    height: 40%;
    border-bottom: 1px solid #B6BCB9;
    border-top: 0px;
    border-left: 0px;
    border-right: 0px;
    outline: none;
}

.select-items{
    position: absolute;
    top: 20;
}

.dropDown {
    display: flex;
    flex-direction: column;
    width: 100%;
    justify-content: space-between;
    padding-bottom: 2%;
}

.dropDownList {
    display: flex;
    flex-direction: row;
    align-items: end;
    width: 100%;
    border-bottom: 1px solid #B6BCB9;
    height: 7vh;
    justify-content: space-between;
    padding-bottom: 2%;
}

.dropDownList p {
    font-weight: 500;
    font-family: montserrat;
    font-size: 1vw;
    color: #999;
}

.dropDownList div {
    width: 5%;
    aspect-ratio: 1/1;
}

.dropContent {
    width: 100%;
    height: 19vh;
    overflow: scroll;
    display: flex;
    justify-content: start;
    flex-direction: column;
    row-gap: 1.1vh;
    border: 1px solid #B6BCB9;
    border-top: 0px;
    box-shadow: 1px 1px 2px 1px rgba(0, 0, 0, 0.23);
    -ms-overflow-style: none;
    scrollbar-width: none;
    padding-top: 1vh;
    border-radius: 0px;
    border-bottom-left-radius: 5px;
    border-bottom-right-radius: 5px;
}

.dropContentOff {
    display: none;
}

.dropContent button {
    display: flex;
    justify-content: start;
    align-items: center;
    width: 100%;
    height: 22%;
    border: 0px;
    font-family: montserrat, inter;
    font-size: 1vw;
    font-weight: 400;
    padding-left: 2%;
    background-color: white;
}
  
/*
else if (action.type === 'selected2') {
        state[`${action.index}`] = state[`${action.index}`] + action.value;
    }

    if (['Insurance', 'Delivery', 'Opening Hours', 'Prescription'].includes(name)) {
            dispatch({type: 'selected', index: idx, value: arg});
        } else {
            dispatch({type: 'selected2', index: idx, value: arg});
        }

    import './content.css';
import Filter from './filter';
import Map from './map';
import { createContext, useReducer } from 'react';
import { locations } from './assets/data';
export const ping = createContext();

function reducer(state, action) {
    if (action.type === '') {
        console.log(action.value);
        return action.value;
    }
}

export default function Content() {
    const [ coOrdinates, updatecoOrdinates] = useReducer(reducer, locations);
    
    return (
        <div className="content">
            <ping.Provider value={{coOrdinates, updatecoOrdinates}}>
                <Filter/>
                <Map/>
            </ping.Provider>
        </div>
    );
}


var locationss = coOrdinates;
        if (flt[idx] === 'Insurance') {
            locationss = locations;
        }
        var all = [];
        
        for (let i = 0; i < locationss.length; i++) {
            const location = locationss[i];
            let current;
          
            if (idx === 0) {
              current = location[flt[idx]].split(", ");
            } else {
              current = location[flt[idx]];
            }
          
            if (current.includes(arg)) {
                all.push(location);
            }
        }
        if (state[0] !== 'Insurance' || flt[idx] === 'Insurance') {
            updatecoOrdinates(all);
        } else {
            updatecoOrdinates(locations);
            updateZoom(12.8);
        }
*/